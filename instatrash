{% if messsages %}
{% for message in messages %}
    <div class="alert alert-{{message.tags}}">
        {{message}}
    </div>
{% endfor %}
{% endif%}




    @receiver(pre_delete, sender=Profile)
    def photo_delete(self, sender, instance, **kwargs):
        cloudinary.uploader.destroy(instance.profile_photo.public_id)


def news_today(request):
    if request.method == 'POST':
        form = NewsLetterForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['your_name']
            email = form.cleaned_data['email']

            recipient = NewsLetterRecipients(name = name,email =email)
            recipient.save()
            send_welcome_email(name,email)

            HttpResponseRedirect('news_today')
            #.................
    return render(request, 'all-news/today-news.html', {"date": date,"news":news,"letterForm":form})


        images = request.user.images.all()


# @classmethod
    # def search_profile(cls, name):
    #     return cls.objects.filter(user__username__icontains=name).all()



<form method="POST">
                {% csrf_token %}

            <input type="hidden" name="image_id" value="{{image.id}}">
            {%if user not in image.liked.all %}
            <button class="btn btn-success" type="submit">Like</button>
            {%else %}
            <button class="btn btn-danger" type="submit">Unlike</button>
            {%endif%}
            </form>
            <strong>{{image.liked.all.count}} Likes</strong>



            <!-- {% load bootstrap3 %} -->



    {% bootstrap_css %}



{% block scripts %}
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
     {% bootstrap_javascript %}
    {% endblock %}





    <nav class="navbar navbar-light bg-light">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="{% url 'index' %}">InstaClone</a>
    </div>
    <div class="navbar-nav">
        <ul>
        {% if user.is_authenticated %}
        <li>
            <a class="btn" href="{%url 'profile'%}">Profile</a>
          </li>

          <li>
            <a class="btn" href="{%url 'logout'%}">Logout</a>
          </li>


        {% else %}
        <li>
          <a class="btn" href="{%url 'login'%}">Login</a>
        </li></ul>

        {% endif %}
      </div>


      <div class="col-sm-4 col-md-4 navbar-right">
        <form class="navbar-form" role="search" action="{% url 'search_results' %}">
          <div class="input-group">
            <input type="text" class="form-control" placeholder="Search Profiles" name="profile">
            <div class="input-group-btn">
              <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
            </div>
          </div>
        </form>
      </div>


  </div>
</nav>








    <!-- <hr class="mt-4">
    <div class="card-columns">
        {% for image in user_images %}
        <div class="card">
            <div class="card-body parent ">
                <div class="im">
                <img src="{{image.gallery_image.url}}" alt="{{image.image_caption}}" class="card-img">
                <p id="overlay"class="text"> 
                    <i class="fas fa-heart" style="color:; font-size: 18"></i> 
                    <span style="color: ">{{image.likes.count}}</span>
                     <i class="fas fa-comment ml-4" style="color: white"></i> <span style="color: ">{{image.comments.count}}</span></p>
            
                    </div>
                    </div>
        </div>
        {% endfor %}
    </div>
</div> -->



<div class="container text-center">
     <img src="{{image.gallery_image.url}}"  class="img-responsive" alt="">
   </div>
</div>
   <div class="card text-center">
    <div class="card-header">
        <h2 class="text-center">{{image.image_name|title}}</h2>
    </div>
    <div class="card-body">
      <p class="card-text">Caption: {{image.image_caption}}</p><br>
      <a href="{% url 'index' %}" class="btn btn-primary">Back to HomePage</a>
    </div>
    <div class="card-footer text-muted"><br>
        Posted on: {{image.pub_date}}
    </div>
  </div>
 </div>



from django.shortcuts import get_object_or_404, redirect, render
from django.http import HttpResponse, Http404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .forms import UserRegisterForm, UserUpdateForm, ProfileUpdateForm, ImageUploadForm, CommentForm
from .models import Profile, Image, User, Subscribers, Follow, Comment, Like
from cloudinary.forms import cl_init_js_callbacks
from django.core.exceptions import ObjectDoesNotExist
from .email import send_welcome_email

@login_required
def index(request):
    images = Image.objects.all()
    comments = Comment.objects.all()
    users = User.objects.exclude(id=request.user.id)
    if request.method == "POST":
        form = ImageUploadForm(request.POST, request.FILES)
        if form.is_valid():
            image = form.save(commit = False)
            image.user = request.user.profile
            image.save()
            messages.success(request, f'Successfully uploaded your pic!')
            return redirect('index')
    else:
        form = ImageUploadForm()
    return render(request, 'index.html', {"images":images[::-1], "form": form, "users": users, "comments": comments })

def register(request):
    if request.method == "POST":
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            email = form.cleaned_data['email']
            recipient = Subscribers(name = username,email =email)
            recipient.save()
            send_welcome_email(username,email)
            messages.success(request, f'Successfully created account created for {username}! Please log in to continue')
            return redirect('login')
    else:
        form = UserRegisterForm()
    return render(request, 'users/register.html', {'form':form})

@login_required
def profile(request):
    # images = Image.objects.all()
    # images = request.user.profile.images.all()
    # images = request.user.images.all()


    images = request.user.profile.images.all()
    comments = Comment.objects.all()


    # if request.method == "POST":
    #     u_form = UserUpdateForm(request.POST, instance=request.user)
    #     p_form = ProfileUpdateForm(request.POST, request.FILES,
    #     instance=request.user.profile)

    #     if u_form.is_valid() and p_form.is_valid():
    #         u_form.save()
    #         p_form.save()
    #         messages.success(request, f'Successfully updated your account!')
    #         return redirect('profile')


    # else:
    #     u_form = UserUpdateForm(instance=request.user)
    #     p_form = ProfileUpdateForm(instance=request.user.profile)

    # context = {
    #     'u_form': u_form,
    #     'p_form': p_form
    # }

    return render(request, 'users/profile.html', {"images":images[::-1], "comments": comments})



@login_required
def update(request):
    if request.method == "POST":
        u_form = UserUpdateForm(request.POST, instance=request.user)
        p_form = ProfileUpdateForm(request.POST, request.FILES,
        instance=request.user.profile)

        if u_form.is_valid() and p_form.is_valid():
            u_form.save()
            p_form.save()
            messages.success(request, f'Successfully updated your account!')
            return redirect('profile')


    else:
        u_form = UserUpdateForm(instance=request.user)
        p_form = ProfileUpdateForm(instance=request.user.profile)

    context = {
        'u_form': u_form,
        'p_form': p_form
    }

    return render(request, 'users/update.html', context)



def image(request,image_id):
    try:
        image = Image.objects.get(id = image_id)
    except ObjectDoesNotExist:
        raise Http404()
    return render(request,"image.html", {"image":image})



@login_required
def search_results(request):

    if 'profile' in request.GET and request.GET["profile"]:

        search_term = request.GET.get("profile")
        searched_profiles = Profile.search_profile(search_term)
        # print('searched_profiles')

        message = f"{search_term}"
        
        
        return render(request, 'search.html', {"message":message,"profiles": searched_profiles})

    else:
        message = "You haven't searched for any profile"

    return render(request, 'search.html', {'message': message})



def like_post(request):
    user = request.user
    if request.method == 'POST':
        image_id = request.POST.get('image_id')
        img_obj = Image.objects.get(id = image_id)

        if user in img_obj.liked.all():
            img_obj.liked.remove(user)
        else:
            img_obj.liked.add(user)

        like, created = Like.objects.get_or_create(user = user, image_id = image_id)

        if not created:
            if like.value == 'Like':
                like.value = 'Unlike'

            else:
                like.value = 'Like'

        like.save()
    
    return redirect(request, 'index.html')



@login_required
def user_profile(request, username):
    user_prof = get_object_or_404(User, username=username)
    if request.user == user_prof:
        return redirect('profile', username=request.user.username)
    user_images = user_prof.profile.images.all()
    
    followers = Follow.objects.filter(followed=user_prof.profile)
    follow_status = None
    for follower in followers:
        if request.user.profile == follower.follower:
            follow_status = True
        else:
            follow_status = False
    params = {
        'user_prof': user_prof,
        'user_images': user_images,
        'followers': followers,
        'follow_status': follow_status
    }
    print(followers)
    return render(request, 'users/user_profile.html', params)



def follow(request, to_follow):
    if request.method == 'GET':
        user_profile3 = Profile.objects.get(pk=to_follow)
        follow_s = Follow(follower=request.user.profile, followed=user_profile3)
        follow_s.save()
        return redirect('user_profile', user_profile3.user.username)


def unfollow(request, to_unfollow):
    if request.method == 'GET':
        user_profile2 = Profile.objects.get(pk=to_unfollow)
        unfollow_d = Follow.objects.filter(follower=request.user.profile, followed=user_profile2)
        unfollow_d.delete()
        return redirect('user_profile', user_profile2.user.username)


@login_required 
def comment(request,image_id):
        current_user=request.user
        image = Image.objects.get(id=image_id)
        user_profile = User.objects.get(username=current_user.username)
        comments = Comment.objects.all()
        
        if request.method == 'POST':
                form = CommentForm(request.POST, request.FILES)
                if form.is_valid():
                        comment = form.save(commit=False)
                        comment.image = image
                        comment.user = request.user
                        comment.save()
            
                       
                return redirect('index')
        else:
                form = CommentForm()
        return render(request, 'comment.html',locals())



from django.db import models
from django.contrib.auth.models import User
from django.dispatch import receiver
from cloudinary.models import CloudinaryField
from django.db.models.signals import pre_delete
from PIL import Image
import cloudinary
import datetime as dt

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE,  related_name='profile')
    bio = models.TextField()
    profile_photo = CloudinaryField('profile_photo')


    def save_profile(self):
        self.save()

        # img = Image.open(self.image.path)

        # if img.height > 300 or img.width > 300:
        #     output_size = (300, 300)
        #     img.thumbnail(output_size)
        #     img.save()

    

    def delete_profile(self):
        self.delete()

    @classmethod
    def update_bio(cls,id, bio):
        update_profile = cls.objects.filter(id = id).update(bio = bio)
        return update_profile

    
    @classmethod
    def search_profile(cls, search_term):
        profs = cls.objects.filter(user__username__icontains=search_term)
        return profs




    def __str__(self):
        return f'{self.user.username} Profile'


class Image(models.Model):
    gallery_image = CloudinaryField('gallery_image', null=True)
    image_name = models.CharField(max_length =30, null=True)
    image_caption = models.CharField(max_length =70, null=True)
    pub_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    liked = models.ManyToManyField(User, related_name='likes', blank=True, )
    user = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='images', null=True)


    class Meta:
        '''
        Class method to display images by date published
        '''
        ordering = ['pub_date']

    def save_image(self):
        '''
        Method to save our images
        '''
        self.save()

    def delete_image(self):
        '''
        Method to delete our images
        '''
        self.delete()

    @property
    def num_liked(self):
        return self.liked.all().count()

    @classmethod
    def update_caption(cls, self, caption):
        update_cap = cls.objects.filter(id = id).update(caption = caption)
        return update_cap

    
    def __str__(self):
        return self.image_name


        

LIKE_CHOICES = (
    ('Like', 'Like'),
    ('Unlike', 'Unlike'),
)


class Like(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null = True)
    image = models.ForeignKey(Image, on_delete=models.CASCADE, null = True)
    value = models.CharField(choices=LIKE_CHOICES, default='Like', max_length=10, null = True)

    def __str__(self):
        return self.image






class Subscribers(models.Model):
    name = models.CharField(max_length = 30)
    email = models.EmailField()


class Comment(models.Model):
    comment = models.TextField()
    image = models.ForeignKey(Image, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')
    created = models.DateTimeField(auto_now_add=True, null=True)

    def save_comment(self):
        self.save()

    def delete_comment(self):
        self.delete()

    @classmethod
    def get_comments(cls,id):
        comments = cls.objects.filter(image__id=id)
        return comments


    def __str__(self):
        return self.comment


class Follow(models.Model):
    follower = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='following')
    followed = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='followers')

    def __str__(self):
        return f'{self.follower} Follow'

